apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-ingress-controller
  labels:
    k8s-app: nginx-ingress-lb
spec:
  replicas: 1
  selector:
    k8s-app: nginx-ingress-lb
  template:
    metadata:
      labels:
        k8s-app: nginx-ingress-lb
        name: nginx-ingress-lb
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - image: gcr.io/google_containers/nginx-ingress-controller:0.8.3
        name: nginx-ingress-lb
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
        - containerPort: 80
          hostPort: 80
        - containerPort: 443
          hostPort: 443
        args:
        - /nginx-ingress-controller
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: default-http-backend
spec:
  replicas: 1
  selector:
    app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        image: gcr.io/google_containers/defaultbackend:1.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
<% proxied_apps = pipeline[:runnables].select { |a| a['run']['port'] } %>
<% if not proxied_apps.empty? %>
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: <%= pipeline[:name] %>
spec:
  rules:
<% for app in proxied_apps %>
  - host: <%= app['name'] %>.<%= pipeline[:name] %>.<%= pipeline[:biodome]['domain'] %>
    http:
      paths:
      - backend:
          serviceName: <%= app['name'] %>-service
          servicePort: 80
<% end %>
<% end %>
<% for app in pipeline[:runnables] %>
<% if app['run']['port'] %>
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: <%= app['name'] %>
  name: <%= app['name'] %>-service
spec:
  ports:
  - port: 80
    protocol: <%= app['run']['protocol'] || 'TCP' %>
    targetPort: <%= app['run']['port'] %>
  selector:
    name: <%= app['name'] %>
<% end %>
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: <%= app['name'] %>
spec:
  replicas: 1
  template:
    metadata:
      name: <%= app['name'] %>
      labels:
        name: <%= app['name'] %>
    spec:
      containers:
      - name: <%= app['name'] %>-container
        image: <%= dockerhub_from_git app['git'] %>:<%= app['git_ref'] %>
        <% if app['run']['port'] %>
        ports:
        - containerPort: <%= app['run']['port'] %>
        <% end %>
        env:
        - name: UNIQUE_APP_ID
          value: <%= app['name'] %>
        <% if pipeline['env'] %>
        <% for e in (pipeline[:env] | []) %>
        - name: <%= e['name'] %>
          value: <%= e['value'] %>
        <% end %>
        <% end %>
        <% for a in (pipeline[:charts] | []) %>
        - name: <%= a['helm'].upcase %>_HOST
          value: <%= a['name'] %>
        <% end %>
        <% if app['env'] %>
        <% for env in (app['env']) %>
        - name: <%= env['name'] %>
          value: <%= env['value'] %>
        <% end %>
        <% end %>
<% end %>
